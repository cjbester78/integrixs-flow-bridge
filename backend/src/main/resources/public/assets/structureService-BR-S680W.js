import{a as e}from"./index-BgQC9CM8.js";class a{async createStructure(r){return e.post("/structures",r)}async getStructures(r){const t=new URLSearchParams;r&&Object.entries(r).forEach(([c,s])=>{s!==void 0&&(Array.isArray(s)?s.forEach(n=>t.append(c,n.toString())):t.append(c,s.toString()))});const u=`/structures${t.toString()?`?${t.toString()}`:""}`;return e.get(u)}async getStructure(r){return e.get(`/structures/${r}`)}async updateStructure(r,t){return e.put(`/structures/${r}`,t)}async deleteStructure(r){return e.delete(`/structures/${r}`)}async validateStructure(r,t){return e.post("/structures/validate",{structure:r,type:t})}async parseStructure(r,t){return e.post("/structures/parse",{content:r,type:t})}async generateSampleData(r,t){const u=`/structures/${r}/sample${t?`?format=${t}`:""}`;return e.get(u)}async getStructureUsage(r){return e.get(`/structures/${r}/usage`)}async cloneStructure(r,t){return e.post(`/structures/${r}/clone`,{name:t})}async compareStructures(r,t){return e.post("/structures/compare",{sourceId:r,targetId:t})}async getStructureMappings(r,t){return e.get(`/structures/mappings?source=${r}&target=${t}`)}async exportStructure(r,t){return e.get(`/structures/${r}/export?format=${t}`)}async searchStructures(r,t){const u=new URLSearchParams({q:r});return t&&Object.entries(t).forEach(([c,s])=>{s!==void 0&&u.append(c,s.toString())}),e.get(`/structures/search?${u.toString()}`)}async getStructureVersions(r){return e.get(`/structures/${r}/versions`)}}const i=new a;export{i as s};
