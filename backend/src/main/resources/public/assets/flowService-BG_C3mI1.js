import{a as o}from"./index-BgQC9CM8.js";class c{async createFlow(t){return o.post("/flows",t)}async getFlows(t){const e=new URLSearchParams;t&&Object.entries(t).forEach(([r,s])=>{s!==void 0&&e.append(r,s.toString())});const n=`/flows${e.toString()?`?${e.toString()}`:""}`;return o.get(n)}async getFlow(t){return o.get(`/flows/${t}`)}async updateFlow(t,e){return o.put(`/flows/${t}`,e)}async deleteFlow(t){return o.delete(`/flows/${t}`)}async testFlow(t,e){return o.post(`/flows/${t}/test`,{testData:e})}async updateFlowStatus(t,e){return o.patch(`/flows/${t}/status`,{status:e})}async getFlowExecutions(t,e){const n=new URLSearchParams;e&&Object.entries(e).forEach(([s,a])=>{a!==void 0&&n.append(s,a.toString())});const r=`/flows/${t}/executions${n.toString()?`?${n.toString()}`:""}`;return o.get(r)}async saveFieldMappings(t,e){return o.post(`/flows/${t}/field-mappings`,{mappings:e})}async cloneFlow(t,e){return o.post(`/flows/${t}/clone`,{name:e})}async validateFlow(t){return o.post("/flows/validate",t)}}const w=new c;export{w as f};
