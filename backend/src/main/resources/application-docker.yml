# Docker-specific Spring Boot configuration
server:
  port: ${SERVER_PORT:8080}
  address: 0.0.0.0

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/integrixflowbridge}
    username: ${SPRING_DATASOURCE_USERNAME:integrix}
    password: ${SPRING_DATASOURCE_PASSWORD:B3st3r@01}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:2}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}


  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

# Logging configuration for production
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.integrixs: ${LOG_LEVEL_APP:INFO}
    org.springframework: ${LOG_LEVEL_SPRING:WARN}
  file:
    path: ${LOG_PATH:/app/logs}
    name: ${LOG_PATH:/app/logs}/integrix-flow-bridge.log
  pattern:
    console: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"

# Security configuration
integrix:
  security:
    master-key: ${INTEGRIX_MASTER_KEY:CHANGE_ME_IN_PRODUCTION}
    encryption:
      enabled: true
    jwt:
      secret: ${JWT_SECRET:CHANGE_ME_IN_PRODUCTION_WITH_LONG_RANDOM_STRING}
      expiration: ${JWT_EXPIRATION:86400000}

# Email configuration
mail:
  smtp:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:587}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    from: ${SMTP_FROM:noreply@integrix.com}
    starttls:
      enable: ${SMTP_STARTTLS:true}
    auth: ${SMTP_AUTH:true}
    connectiontimeout: ${SMTP_TIMEOUT:10000}
    timeout: ${SMTP_TIMEOUT:10000}
    writetimeout: ${SMTP_TIMEOUT:10000}

# Certificate storage
certificates:
  storage:
    path: ${CERT_PATH:/app/certs}

# Engine configuration
engine:
  worker:
    thread-pool-size: ${ENGINE_THREADS:4}
    retry-attempts: ${ENGINE_RETRY:3}
    retry-delay-ms: ${ENGINE_RETRY_DELAY:2000}

# System environment
system:
  environment:
    type: ${SYSTEM_ENV:PRODUCTION}
    enforce-restrictions: true

# Actuator endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: ${HEALTH_DETAILS:when-authorized}
  metrics:
    export:
      prometheus:
        enabled: true